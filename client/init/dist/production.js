!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r():"function"==typeof define&&define.amd?define(r):r()}(0,function(){"use strict";var extend=function e(r,t){return null==r||null==t?r:(Object.keys(t).forEach(function(n){"[object Object]"==Object.prototype.toString.call(t[n])?"[object Object]"!=Object.prototype.toString.call(r[n])?r[n]=t[n]:r[n]=e(r[n],t[n]):r[n]=t[n]}),r)};function normalizeArray(e,r){for(var t=0,n=e.length-1;n>=0;n--){var o=e[n];"."===o?e.splice(n,1):".."===o?(e.splice(n,1),t++):t&&(e.splice(n,1),t--)}if(r)for(;t--;t)e.unshift("..");return e}var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,splitPath=function(e){return splitPathRe.exec(e).slice(1)};function normalize(e){var r=isAbsolute(e),t="/"===substr(e,-1);return(e=normalizeArray(filter(e.split("/"),function(e){return!!e}),!r).join("/"))||r||(e="."),e&&t&&(e+="/"),(r?"/":"")+e}function isAbsolute(e){return"/"===e.charAt(0)}function join(){return normalize(filter(Array.prototype.slice.call(arguments,0),function(e,r){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))}function dirname(e){var r=splitPath(e),t=r[0],n=r[1];return t||n?(n&&(n=n.substr(0,n.length-1)),t+n):"."}function filter(e,r){if(e.filter)return e.filter(r);for(var t=[],n=0;n<e.length;n++)r(e[n],n,e)&&t.push(e[n]);return t}var substr="b"==="ab".substr(-1)?function(e,r,t){return e.substr(r,t)}:function(e,r,t){return r<0&&(r=e.length+r),e.substr(r,t)},commonjsGlobal="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(e,r){return e(r={exports:{}},r.exports),r.exports}var pathBrowserify=createCommonjsModule(function(e,r){function t(e,r){for(var t=0,n=e.length-1;n>=0;n--){var o=e[n];"."===o?e.splice(n,1):".."===o?(e.splice(n,1),t++):t&&(e.splice(n,1),t--)}if(r)for(;t--;t)e.unshift("..");return e}var n=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,o=function(e){return n.exec(e).slice(1)};function i(e,r){if(e.filter)return e.filter(r);for(var t=[],n=0;n<e.length;n++)r(e[n],n,e)&&t.push(e[n]);return t}r.resolve=function(){for(var e="",r=!1,n=arguments.length-1;n>=-1&&!r;n--){var o=n>=0?arguments[n]:process.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(e=o+"/"+e,r="/"===o.charAt(0))}return e=t(i(e.split("/"),function(e){return!!e}),!r).join("/"),(r?"/":"")+e||"."},r.normalize=function(e){var n=r.isAbsolute(e),o="/"===s(e,-1);return(e=t(i(e.split("/"),function(e){return!!e}),!n).join("/"))||n||(e="."),e&&o&&(e+="/"),(n?"/":"")+e},r.isAbsolute=function(e){return"/"===e.charAt(0)},r.join=function(){var e=Array.prototype.slice.call(arguments,0);return r.normalize(i(e,function(e,r){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},r.relative=function(e,t){function n(e){for(var r=0;r<e.length&&""===e[r];r++);for(var t=e.length-1;t>=0&&""===e[t];t--);return r>t?[]:e.slice(r,t-r+1)}e=r.resolve(e).substr(1),t=r.resolve(t).substr(1);for(var o=n(e.split("/")),i=n(t.split("/")),s=Math.min(o.length,i.length),u=s,a=0;a<s;a++)if(o[a]!==i[a]){u=a;break}var l=[];for(a=u;a<o.length;a++)l.push("..");return(l=l.concat(i.slice(u))).join("/")},r.sep="/",r.delimiter=":",r.dirname=function(e){var r=o(e),t=r[0],n=r[1];return t||n?(n&&(n=n.substr(0,n.length-1)),t+n):"."},r.basename=function(e,r){var t=o(e)[2];return r&&t.substr(-1*r.length)===r&&(t=t.substr(0,t.length-r.length)),t},r.extname=function(e){return o(e)[3]};var s="b"==="ab".substr(-1)?function(e,r,t){return e.substr(r,t)}:function(e,r,t){return r<0&&(r=e.length+r),e.substr(r,t)}}),pathBrowserify_1=pathBrowserify.resolve,pathBrowserify_2=pathBrowserify.normalize,pathBrowserify_3=pathBrowserify.isAbsolute,pathBrowserify_4=pathBrowserify.join,pathBrowserify_5=pathBrowserify.relative,pathBrowserify_6=pathBrowserify.sep,pathBrowserify_7=pathBrowserify.delimiter,pathBrowserify_8=pathBrowserify.dirname,pathBrowserify_9=pathBrowserify.basename,pathBrowserify_10=pathBrowserify.extname,join$2=pathBrowserify.join,basename$1=pathBrowserify.basename,isFile=function(e){return basename$1(e).includes(".")},resolveDestPath=function(e,r,t){return"string"!=typeof r?absolute(e):isFile(r)?absolute(r):join$2(absolute(r),absolute(e).replace(absolute(t),""))},isRelative$1=function(e){return"."===e.charAt(0)&&("."===e.charAt(1)||"/"===e.charAt(1))},isAbsolute$2=function(e){return"/"===e.charAt(0)},absolute=function(e){return isAbsolute$2(e)?e:join$2(getRootPath$1(),e)},relative$1=function(e){return isAbsolute$2(e)?e.replace(getRootPath$1()+"/",""):e},getRootPath$1=function(){return commonjsGlobal.ethical&&commonjsGlobal.ethical.cwd||process.cwd()},isFile_1=isFile,resolveDestPath_1=resolveDestPath,isRelative_1=isRelative$1,isAbsolute_1=isAbsolute$2,absolute_1=absolute,relative_1=relative$1,getRootPath_1=getRootPath$1,path$1={isFile:isFile_1,resolveDestPath:resolveDestPath_1,isRelative:isRelative_1,isAbsolute:isAbsolute_1,absolute:absolute_1,relative:relative_1,getRootPath:getRootPath_1},isRelative=path$1.isRelative,isAbsolute$1=path$1.isAbsolute,join$1=pathBrowserify.join,extensions=["js","json","node"],getAppPrefix=function(e){return"&"},isPackage=function(e){return!isRelative(e)&&!isAbsolute$1(e)},isAbsolutePackage=function(e){return!(!isPackage(e)||-1!==e.indexOf("/"))},appendExtension=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"js";if(isAbsolutePackage(e))return e;var t="."+r;return e.slice(-t.length)===t?e:e+t},extensions_1=extensions,getAppPrefix_1=getAppPrefix,isPackage_1=isPackage,isAbsolutePackage_1=isAbsolutePackage,appendExtension_1=appendExtension;function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,r){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!r||"object"!=typeof r&&"function"!=typeof r?e:r}function _inherits(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function, not "+typeof r);e.prototype=Object.create(r&&r.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),r&&(Object.setPrototypeOf?Object.setPrototypeOf(e,r):e.__proto__=r)}var cache={},createLocalRequire=function(e){return function(r){return window.require(r,e)}},resolveExports=function(e){if(cache[e])return cache[e];var r=require.defined[e];if(r){var t=createLocalRequire(e),n={exports:{}};return r.call(n.exports,n.exports,t,n),cache[e]=n}return null},requestMap=function(e,r,t){return e[t]&&e[t][r]||r},getModuleRoot=function(e){var r=e.split("/"),t=r.lastIndexOf("node_modules");return-1===t?r[0]:r.slice(0,t+2).join("/")},resolveFilename=function(e,r){if(isAbsolutePackage_1(e))return e;if(isPackage_1(e))return e;var t=window.require.alias,n=t[r]?t[r]:r;return join(dirname(appendExtension_1(n)),e)},ModuleError=function(e){function r(e,t){_classCallCheck(this,r);var n=_possibleConstructorReturn(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,e));return n.code="MODULE_NOT_FOUND",n.module=t,n}return _inherits(r,Error),r}(),load=function(e){for(var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:getAppPrefix_1(),t=window.require,n=getModuleRoot(r),o=requestMap(t.browserMap,e,n),i=requestMap(t.conflictMap,o,n),s=resolveFilename(i,r),u=0;u<extensions_1.length;u++){var a=appendExtension_1(s,extensions_1[u]),l=resolveExports(a);if(l)return l.exports}for(var c=0;c<extensions_1.length;c++){var f=appendExtension_1(join(s,"index"),extensions_1[c]),p=resolveExports(f);if(p)return p.exports}throw new ModuleError('Cannot find module "'+s+'" from "'+r+'"',s)},evalModules=function(e){e.forEach(function(e){var r=window.require,t=e.id,n=e.key,o=e.alias,i=e.source;r.defineSource(n,i),r.ids.push(t),o&&(r.alias[n]=o)})},enableBrowserRequire=function enableBrowserRequire(modules){var require=function(e,r){return load(e,r)};require.defined={},require.ids=[],require.processing={},require.alias={},require.browserMap={},require.conflictMap={},require.define=function(e,r){return require.defined[e]=r},require.defineSource=function(key,source){var wrappedModule=eval("(function(exports,require,module){"+source+"\n}).bind(window)");require.define(key,wrappedModule)},require.load=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=r.url,n=void 0===t?"module":t;if(require.processing[e])return require.processing[e];var o=require.ids,i=JSON.stringify({entry:e,exclude:o}),s=Object.assign({method:"POST",headers:{"Content-Type":"application/json"},body:i},r),u=window.fetch(n,s).then(function(r){return delete require.processing[e],r.json()}).then(function(e){var r=e.browserMap,t=e.conflictMap,n=e.modules;require.browserMap=extend(require.browserMap,r),require.conflictMap=extend(require.conflictMap,t),evalModules(n)}).then(function(){return require.warmup()}).catch(function(e){return console.error(e)});return require.processing[e]=u},require.warmupQ=[],require.warmup=function(){for(var e=arguments.length,r=Array(e),t=0;t<e;t++)r[t]=arguments[t];var n,o;if(r.length>0)return(n=console).log.apply(n,["Pending warm up..."].concat(r)),(o=require.warmupQ).push.apply(o,r),setTimeout(function(){return require.warmup()},0);if(0!==require.warmupQ.length&&!(Object.keys(require.processing).length>0)){var i=require.warmupQ.pop();if(require.defined[i])return require.warmup();console.log("Warming up...",i),require.load(i)}},window.require=require,modules&&evalModules(modules)};enableBrowserRequire()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
