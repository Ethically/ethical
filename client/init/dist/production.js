!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r():"function"==typeof define&&define.amd?define(r):r()}(0,function(){"use strict";function normalizeArray(e,r){for(var t=0,n=e.length-1;n>=0;n--){var i=e[n];"."===i?e.splice(n,1):".."===i?(e.splice(n,1),t++):t&&(e.splice(n,1),t--)}if(r)for(;t--;t)e.unshift("..");return e}function resolve(){for(var e="",r=!1,t=arguments.length-1;t>=-1&&!r;t--){var n=t>=0?arguments[t]:"/";if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");n&&(e=n+"/"+e,r="/"===n.charAt(0))}return e=normalizeArray(filter(e.split("/"),function(e){return!!e}),!r).join("/"),(r?"/":"")+e||"."}function normalize(e){var r=isAbsolute(e),t="/"===substr(e,-1);return(e=normalizeArray(filter(e.split("/"),function(e){return!!e}),!r).join("/"))||r||(e="."),e&&t&&(e+="/"),(r?"/":"")+e}function isAbsolute(e){return"/"===e.charAt(0)}function join(){return normalize(filter(Array.prototype.slice.call(arguments,0),function(e,r){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))}function relative(e,r){function t(e){for(var r=0;r<e.length&&""===e[r];r++);for(var t=e.length-1;t>=0&&""===e[t];t--);return r>t?[]:e.slice(r,t-r+1)}e=resolve(e).substr(1),r=resolve(r).substr(1);for(var n=t(e.split("/")),i=t(r.split("/")),o=Math.min(n.length,i.length),s=o,a=0;a<o;a++)if(n[a]!==i[a]){s=a;break}for(var u=[],a=s;a<n.length;a++)u.push("..");return(u=u.concat(i.slice(s))).join("/")}function dirname(e){var r=splitPath(e),t=r[0],n=r[1];return t||n?(n&&(n=n.substr(0,n.length-1)),t+n):"."}function basename(e,r){var t=splitPath(e)[2];return r&&t.substr(-1*r.length)===r&&(t=t.substr(0,t.length-r.length)),t}function extname$1(e){return splitPath(e)[3]}function filter(e,r){if(e.filter)return e.filter(r);for(var t=[],n=0;n<e.length;n++)r(e[n],n,e)&&t.push(e[n]);return t}var extend=function e(r,t){return null==r||null==t?r:(Object.keys(t).forEach(function(n){"[object Object]"==Object.prototype.toString.call(t[n])?"[object Object]"!=Object.prototype.toString.call(r[n])?r[n]=t[n]:r[n]=e(r[n],t[n]):r[n]=t[n]}),r)},splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,splitPath=function(e){return splitPathRe.exec(e).slice(1)},sep="/",delimiter=":",path={extname:extname$1,basename:basename,dirname:dirname,sep:sep,delimiter:delimiter,relative:relative,join:join,isAbsolute:isAbsolute,normalize:normalize,resolve:resolve},substr="b"==="ab".substr(-1)?function(e,r,t){return e.substr(r,t)}:function(e,r,t){return r<0&&(r=e.length+r),e.substr(r,t)},path$1=Object.freeze({resolve:resolve,normalize:normalize,isAbsolute:isAbsolute,join:join,relative:relative,sep:sep,delimiter:delimiter,dirname:dirname,basename:basename,extname:extname$1,default:path}),_require=path$1&&path||path$1,join$2=_require.join,basename$1=_require.basename,isFile=function(e){return basename$1(e).includes(".")},resolveDestPath=function(e,r,t){return"string"!=typeof r?absolute(e):isFile(r)?absolute(r):join$2(absolute(r),absolute(e).replace(absolute(t),""))},isRelative$1=function(e){return"."===e.charAt(0)&&("."===e.charAt(1)||"/"===e.charAt(1))},isAbsolute$2=function(e){return"/"===e.charAt(0)},absolute=function(e){return isAbsolute$2(e)?e:join$2(getRootPath$1(),e)},relative$1=function(e){return isAbsolute$2(e)?e.replace(getRootPath$1()+"/",""):e},getRootPath$1=function(){return process.cwd()},isFile_1=isFile,resolveDestPath_1=resolveDestPath,isRelative_1=isRelative$1,isAbsolute_1=isAbsolute$2,absolute_1=absolute,relative_1=relative$1,getRootPath_1=getRootPath$1,path$2={isFile:isFile_1,resolveDestPath:resolveDestPath_1,isRelative:isRelative_1,isAbsolute:isAbsolute_1,absolute:absolute_1,relative:relative_1,getRootPath:getRootPath_1},isRelative=path$2.isRelative,isAbsolute$1=path$2.isAbsolute,join$1=_require.join,resolve$1=_require.resolve,dirname$1=_require.dirname,extensions=["js","json","node"],getAppPrefix=function(e){return"~"},isPackage=function(e){return!isRelative(e)&&!isAbsolute$1(e)},isAbsolutePackage=function(e){return!(!isPackage(e)||-1!==e.indexOf("/"))},appendExtension=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"js";if(isAbsolutePackage(e))return e;var t="."+r;return e.slice(-t.length)===t?e:e+t},extensions_1=extensions,getAppPrefix_1=getAppPrefix,isPackage_1=isPackage,isAbsolutePackage_1=isAbsolutePackage,appendExtension_1=appendExtension,cache={},resolveExports=function(e){if(cache[e])return cache[e];var r=require.defined[e];if(r){var t=createLocalRequire(e),n=cache[e]={exports:{}};return r.call(n.exports,n.exports,t,n),n}return null},load=function(e){for(var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:getAppPrefix_1(),t=window.require,n=getModuleRoot(r),i=requestMap(t.browserMap,e,n),o=requestMap(t.conflictMap,i,n),s=resolveFilename(o,r),a=0;a<extensions_1.length;a++){var u=appendExtension_1(s,extensions_1[a]),l=resolveExports(u);if(l)return l.exports}for(var c=0;c<extensions_1.length;c++){var f=appendExtension_1(join(s,"index"),extensions_1[c]),p=resolveExports(f);if(p)return p.exports}var d=new Error('Cannot find module "'+s+'" from "'+r+'"');throw d.code="MODULE_NOT_FOUND",d},requestMap=function(e,r,t){return e[t]&&e[t][r]||r},getModuleRoot=function(e){var r=e.split("/"),t=r.lastIndexOf("node_modules");return-1===t?r[0]:r.slice(0,t+2).join("/")},resolveFilename=function(e,r){if(isAbsolutePackage_1(e))return e;if(isPackage_1(e))return e;var t=window.require.alias,n=t[r]?t[r]:r;return join(dirname(appendExtension_1(n)),e)},createLocalRequire=function(e){return function(r){return window.require(r,e)}},evalModules=function(e){e.forEach(function(e){var r=window.require,t=e.id,n=e.key,i=e.alias,o=e.source;r.defineSource(n,o),r.ids.push(t),i&&(r.alias[n]=i)})},enableBrowserRequire=function enableBrowserRequire(modules){var require=function(e,r){return load(e,r)};require.defined={},require.ids=[],require.alias={},require.browserMap={},require.conflictMap={},require.define=function(e,r){return require.defined[e]=r},require.defineSource=function(key,source){var wrappedModule=eval("(function(exports,require,module){"+source+"\n}).bind(window)");require.define(key,wrappedModule)},require.load=function(e){return window.fetch(e).then(function(e){return e.json()}).then(function(e){var r=e.browserMap,t=e.conflictMap,n=e.modules;require.browserMap=extend(require.browserMap,r),require.conflictMap=extend(require.conflictMap,t),evalModules(n)}).catch(function(e){return console.error(e)})},window.require=require,modules&&evalModules(modules)};enableBrowserRequire()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdGlvbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L3BhdGguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvb2JqZWN0LWV4dGVuZC9saWIvZXh0ZW5kLmpzIiwiLi4vLi4vLi4vaGVscGVyL3BhdGgvaW5kZXguanMiLCIuLi8uLi8uLi9oZWxwZXIvcmVzb2x2ZS9pbmRleC5qcyIsIi4uLy4uL3JlcXVpcmUvbGliL21vZHVsZS5qcyIsIi4uLy4uL3JlcXVpcmUvbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyByZXNvbHZlcyAuIGFuZCAuLiBlbGVtZW50cyBpbiBhIHBhdGggYXJyYXkgd2l0aCBkaXJlY3RvcnkgbmFtZXMgdGhlcmVcbi8vIG11c3QgYmUgbm8gc2xhc2hlcywgZW1wdHkgZWxlbWVudHMsIG9yIGRldmljZSBuYW1lcyAoYzpcXCkgaW4gdGhlIGFycmF5XG4vLyAoc28gYWxzbyBubyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzIC0gaXQgZG9lcyBub3QgZGlzdGluZ3Vpc2hcbi8vIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBwYXRocylcbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLCBhbGxvd0Fib3ZlUm9vdCkge1xuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgbGFzdCA9IHBhcnRzW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgcGFydHMudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFydHM7XG59XG5cbi8vIFNwbGl0IGEgZmlsZW5hbWUgaW50byBbcm9vdCwgZGlyLCBiYXNlbmFtZSwgZXh0XSwgdW5peCB2ZXJzaW9uXG4vLyAncm9vdCcgaXMganVzdCBhIHNsYXNoLCBvciBub3RoaW5nLlxudmFyIHNwbGl0UGF0aFJlID1cbiAgICAvXihcXC8/fCkoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz98KShcXC5bXi5cXC9dKnwpKSg/OltcXC9dKikkLztcbnZhciBzcGxpdFBhdGggPSBmdW5jdGlvbihmaWxlbmFtZSkge1xuICByZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSk7XG59O1xuXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZSgpIHtcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgdmFyIHBhdGggPSAoaSA+PSAwKSA/IGFyZ3VtZW50c1tpXSA6ICcvJztcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHBhdGgpIHtcbiAgdmFyIGlzUGF0aEFic29sdXRlID0gaXNBYnNvbHV0ZShwYXRoKSxcbiAgICAgIHRyYWlsaW5nU2xhc2ggPSBzdWJzdHIocGF0aCwgLTEpID09PSAnLyc7XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFpc1BhdGhBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNQYXRoQWJzb2x1dGUpIHtcbiAgICBwYXRoID0gJy4nO1xuICB9XG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBwYXRoICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiAoaXNQYXRoQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0IGZ1bmN0aW9uIGpvaW4oKSB7XG4gIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHJldHVybiBub3JtYWxpemUoZmlsdGVyKHBhdGhzLCBmdW5jdGlvbihwLCBpbmRleCkge1xuICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICAgIHJldHVybiBwO1xuICB9KS5qb2luKCcvJykpO1xufVxuXG5cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnQgZnVuY3Rpb24gcmVsYXRpdmUoZnJvbSwgdG8pIHtcbiAgZnJvbSA9IHJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO1xuICB0byA9IHJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn1cblxuZXhwb3J0IHZhciBzZXAgPSAnLyc7XG5leHBvcnQgdmFyIGRlbGltaXRlciA9ICc6JztcblxuZXhwb3J0IGZ1bmN0aW9uIGRpcm5hbWUocGF0aCkge1xuICB2YXIgcmVzdWx0ID0gc3BsaXRQYXRoKHBhdGgpLFxuICAgICAgcm9vdCA9IHJlc3VsdFswXSxcbiAgICAgIGRpciA9IHJlc3VsdFsxXTtcblxuICBpZiAoIXJvb3QgJiYgIWRpcikge1xuICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlclxuICAgIHJldHVybiAnLic7XG4gIH1cblxuICBpZiAoZGlyKSB7XG4gICAgLy8gSXQgaGFzIGEgZGlybmFtZSwgc3RyaXAgdHJhaWxpbmcgc2xhc2hcbiAgICBkaXIgPSBkaXIuc3Vic3RyKDAsIGRpci5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIHJldHVybiByb290ICsgZGlyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFzZW5hbWUocGF0aCwgZXh0KSB7XG4gIHZhciBmID0gc3BsaXRQYXRoKHBhdGgpWzJdO1xuICAvLyBUT0RPOiBtYWtlIHRoaXMgY29tcGFyaXNvbiBjYXNlLWluc2Vuc2l0aXZlIG9uIHdpbmRvd3M/XG4gIGlmIChleHQgJiYgZi5zdWJzdHIoLTEgKiBleHQubGVuZ3RoKSA9PT0gZXh0KSB7XG4gICAgZiA9IGYuc3Vic3RyKDAsIGYubGVuZ3RoIC0gZXh0Lmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGY7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dG5hbWUocGF0aCkge1xuICByZXR1cm4gc3BsaXRQYXRoKHBhdGgpWzNdO1xufVxuZXhwb3J0IGRlZmF1bHQge1xuICBleHRuYW1lOiBleHRuYW1lLFxuICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gIGRpcm5hbWU6IGRpcm5hbWUsXG4gIHNlcDogc2VwLFxuICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgcmVsYXRpdmU6IHJlbGF0aXZlLFxuICBqb2luOiBqb2luLFxuICBpc0Fic29sdXRlOiBpc0Fic29sdXRlLFxuICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgcmVzb2x2ZTogcmVzb2x2ZVxufTtcbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InID9cbiAgICBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH0gOlxuICAgIGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcbiIsIi8qIVxuICogb2JqZWN0LWV4dGVuZFxuICogQSB3ZWxsLXRlc3RlZCBmdW5jdGlvbiB0byBkZWVwIGV4dGVuZCAob3IgbWVyZ2UpIEphdmFTY3JpcHQgb2JqZWN0cyB3aXRob3V0IGZ1cnRoZXIgZGVwZW5kZW5jaWVzLlxuICpcbiAqIGh0dHA6Ly9naXRodWIuY29tL2Jlcm5oYXJkd1xuICpcbiAqIENvcHlyaWdodCAyMDEzLCBCZXJuaGFyZCBXYW5nZXIgPG1haWxAYmVybmhhcmR3YW5nZXIuY29tPlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICpcbiAqIERhdGU6IDIwMTMtMDQtMTBcbiAqL1xuXG5cbi8qKlxuICogRXh0ZW5kIG9iamVjdCBhIHdpdGggb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgU291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBiIE9iamVjdCB0byBleHRlbmQgd2l0aC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IGEgRXh0ZW5kZWQgb2JqZWN0LlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG5cbiAgICAvLyBEb24ndCB0b3VjaCAnbnVsbCcgb3IgJ3VuZGVmaW5lZCcgb2JqZWN0cy5cbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBSZWZhY3RvciB0byB1c2UgZm9yLWxvb3AgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gICAgT2JqZWN0LmtleXMoYikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cbiAgICAgICAgLy8gRGV0ZWN0IG9iamVjdCB3aXRob3V0IGFycmF5LCBkYXRlIG9yIG51bGwuXG4gICAgICAgIC8vIFRPRE86IFBlcmZvcm1hbmNlIHRlc3Q6XG4gICAgICAgIC8vIGEpIGIuY29uc3RydWN0b3IgPT09IE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3JcbiAgICAgICAgLy8gYikgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpID09ICdbb2JqZWN0IE9iamVjdF0nXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYltrZXldKSA9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhW2tleV0pICE9ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgICAgICAgICAgYVtrZXldID0gYltrZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhW2tleV0gPSBleHRlbmQoYVtrZXldLCBiW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYVtrZXldID0gYltrZXldO1xuICAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIHJldHVybiBhO1xuXG59OyIsImNvbnN0IHsgam9pbiwgYmFzZW5hbWUgfSA9IHJlcXVpcmUoJ3BhdGgnKVxuXG5jb25zdCBpc0ZpbGUgPSAocGF0aCkgPT4gKCBiYXNlbmFtZShwYXRoKS5pbmNsdWRlcygnLicpIClcblxuY29uc3QgcmVzb2x2ZURlc3RQYXRoID0gKHBhdGgsIGRlc3QsIGJhc2UpID0+IHtcbiAgICBpZiAodHlwZW9mIGRlc3QgIT09ICdzdHJpbmcnKSByZXR1cm4gYWJzb2x1dGUocGF0aClcbiAgICBpZiAoaXNGaWxlKGRlc3QpKSByZXR1cm4gYWJzb2x1dGUoZGVzdClcbiAgICByZXR1cm4gam9pbihhYnNvbHV0ZShkZXN0KSwgYWJzb2x1dGUocGF0aCkucmVwbGFjZShhYnNvbHV0ZShiYXNlKSwgJycpKVxufVxuXG5jb25zdCBpc1JlbGF0aXZlID0gKHBhdGgpID0+IHtcbiAgICBpZiAocGF0aC5jaGFyQXQoMCkgPT09ICcuJyAmJiAoXG4gICAgICAgIHBhdGguY2hhckF0KDEpID09PSAnLicgfHwgcGF0aC5jaGFyQXQoMSkgPT09ICcvJykpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmNvbnN0IGlzQWJzb2x1dGUgPSAocGF0aCkgPT4ge1xuICAgIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5jb25zdCBhYnNvbHV0ZSA9IChwYXRoKSA9PiB7XG4gICAgaWYgKGlzQWJzb2x1dGUocGF0aCkpIHJldHVybiBwYXRoXG4gICAgcmV0dXJuIGpvaW4oZ2V0Um9vdFBhdGgoKSwgcGF0aClcbn1cblxuY29uc3QgcmVsYXRpdmUgPSAocGF0aCkgPT4ge1xuICAgIGlmICghaXNBYnNvbHV0ZShwYXRoKSkgcmV0dXJuIHBhdGhcbiAgICByZXR1cm4gcGF0aC5yZXBsYWNlKGdldFJvb3RQYXRoKCkgKyAnLycgLCAnJylcbn1cblxuY29uc3QgZ2V0Um9vdFBhdGggPSAoKSA9PiBwcm9jZXNzLmN3ZCgpXG5cbmV4cG9ydHMuaXNGaWxlID0gaXNGaWxlXG5leHBvcnRzLnJlc29sdmVEZXN0UGF0aCA9IHJlc29sdmVEZXN0UGF0aFxuZXhwb3J0cy5pc1JlbGF0aXZlID0gaXNSZWxhdGl2ZVxuZXhwb3J0cy5pc0Fic29sdXRlID0gaXNBYnNvbHV0ZVxuZXhwb3J0cy5hYnNvbHV0ZSA9IGFic29sdXRlXG5leHBvcnRzLnJlbGF0aXZlID0gcmVsYXRpdmVcbmV4cG9ydHMuZ2V0Um9vdFBhdGggPSBnZXRSb290UGF0aFxuIiwiY29uc3QgaXNOb2RlID0gcmVxdWlyZSgnLi4vLi4vaGVscGVyL2lzLW5vZGUnKVxuY29uc3QgeyBpc1JlbGF0aXZlLCBpc0Fic29sdXRlLCBnZXRSb290UGF0aCB9ID0gcmVxdWlyZSgnLi4vLi4vaGVscGVyL3BhdGgnKVxuY29uc3QgeyBqb2luLCByZXNvbHZlLCBkaXJuYW1lIH0gPSByZXF1aXJlKCdwYXRoJylcblxuY29uc3QgZXh0ZW5zaW9ucyA9IFsnanMnLCAnanNvbicsICdub2RlJ11cblxuY29uc3QgcmVzb2x2ZUFtYmlndW91c1BhdGggPSAocGF0aCkgPT4ge1xuXG4gICAgaWYgKGV4dGVuc2lvbnMuaW5jbHVkZXMoZXh0bmFtZShwYXRoKSkpIHtcbiAgICAgICAgcmV0dXJuIHBhdGhcbiAgICB9XG5cbiAgICBjb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmZpbmQoZXh0ZW5zaW9uID0+IChcbiAgICAgICAgcGF0aEV4aXN0c1N5bmMoYXBwZW5kRXh0ZW5zaW9uKHBhdGgsIGV4dGVuc2lvbikpXG4gICAgKSlcblxuICAgIGlmIChleHRlbnNpb24pIHtcbiAgICAgICAgcmV0dXJuIGFwcGVuZEV4dGVuc2lvbihwYXRoLCBleHRlbnNpb24pXG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXggPSBqb2luKHBhdGgsICdpbmRleC5qcycpXG4gICAgaWYgKHBhdGhFeGlzdHNTeW5jKGluZGV4KSkge1xuICAgICAgICByZXR1cm4gaW5kZXhcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxufVxuXG5jb25zdCBnZXRBcHBQcmVmaXggPSAobW9kdWxlTmFtZSkgPT4gJ34nXG5cbmNvbnN0IGlzQXBwTW9kdWxlID0gKG1vZHVsZU5hbWUpID0+IChcbiAgICBtb2R1bGVOYW1lLmNoYXJBdCgwKSA9PT0gZ2V0QXBwUHJlZml4KClcbilcblxuY29uc3QgaXNQYWNrYWdlID0gKG5hbWUpID0+IHtcbiAgICBpZiAoaXNSZWxhdGl2ZShuYW1lKSB8fCBpc0Fic29sdXRlKG5hbWUpKSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gdHJ1ZVxufVxuXG5jb25zdCBpc0Fic29sdXRlUGFja2FnZSA9IChuYW1lKSA9PiB7XG4gICAgaWYgKGlzUGFja2FnZShuYW1lKSAmJiBuYW1lLmluZGV4T2YoJy8nKSA9PT0gLTEpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmNvbnN0IGlzUmVsYXRpdmVQYWNrYWdlID0gKG5hbWUpID0+IHtcbiAgICBpZiAobmFtZS5pbmRleE9mKCcvJykgPiAtMSAmJiBpc1BhY2thZ2UobmFtZSkpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmNvbnN0IGFwcGVuZEV4dGVuc2lvbiA9IChuYW1lLCBleHRlbnNpb24gPSAnanMnKSA9PiB7XG4gICAgaWYgKGlzQWJzb2x1dGVQYWNrYWdlKG5hbWUpKSByZXR1cm4gbmFtZVxuICAgIGNvbnN0IGV4dCA9ICcuJyArIGV4dGVuc2lvblxuICAgIGlmIChuYW1lLnNsaWNlKC0oZXh0Lmxlbmd0aCkpID09PSBleHQpIHJldHVybiBuYW1lXG4gICAgcmV0dXJuIG5hbWUgKyBleHRcbn1cblxuY29uc3QgZ2V0UmVxdWlyZSA9ICgpID0+IHtcbiAgICBpZiAoaXNOb2RlKCkpIHJldHVybiByZXF1aXJlXG4gICAgcmV0dXJuIHdpbmRvdy5yZXF1aXJlXG59XG5cbmNvbnN0IHJlc29sdmVNb2R1bGVOYW1lID0gKG1vZHVsZSkgPT4ge1xuICAgIGlmIChpc0FwcE1vZHVsZShtb2R1bGUpKSB7XG4gICAgICAgIHJldHVybiBqb2luKGdldFJvb3RQYXRoKCksIHJlcGxhY2UoZ2V0QXBwUHJlZml4KCksICcnKSlcbiAgICB9XG4gICAgaWYgKGlzUmVsYXRpdmUobW9kdWxlKSkgcmV0dXJuIGpvaW4oZ2V0Um9vdFBhdGgoKSwgbW9kdWxlKVxuICAgIHJldHVybiBtb2R1bGVcbn1cblxuY29uc3QgcmVxdWlyZU1vZHVsZSA9IChuYW1lKSA9PiB7XG4gICAgY29uc3QgcGF0aCA9ICggaXNOb2RlKCkgPyByZXNvbHZlTW9kdWxlTmFtZShuYW1lKSA6IG5hbWUgKVxuICAgIHJldHVybiBnZXRSZXF1aXJlKCkocGF0aClcbn1cblxuZXhwb3J0cy5leHRlbnNpb25zID0gZXh0ZW5zaW9uc1xuZXhwb3J0cy5nZXRBcHBQcmVmaXggPSBnZXRBcHBQcmVmaXhcbmV4cG9ydHMuaXNBcHBNb2R1bGUgPSBpc0FwcE1vZHVsZVxuZXhwb3J0cy5pc1BhY2thZ2UgPSBpc1BhY2thZ2VcbmV4cG9ydHMuaXNBYnNvbHV0ZVBhY2thZ2UgPSBpc0Fic29sdXRlUGFja2FnZVxuZXhwb3J0cy5pc1JlbGF0aXZlUGFja2FnZSA9IGlzUmVsYXRpdmVQYWNrYWdlXG5leHBvcnRzLmFwcGVuZEV4dGVuc2lvbiA9IGFwcGVuZEV4dGVuc2lvblxuZXhwb3J0cy5nZXRSZXF1aXJlID0gZ2V0UmVxdWlyZVxuZXhwb3J0cy5yZXNvbHZlTW9kdWxlTmFtZSA9IHJlc29sdmVNb2R1bGVOYW1lXG5leHBvcnRzLnJlcXVpcmVNb2R1bGUgPSByZXF1aXJlTW9kdWxlXG5leHBvcnRzLnJlc29sdmVBbWJpZ3VvdXNQYXRoID0gcmVzb2x2ZUFtYmlndW91c1BhdGhcbiIsImltcG9ydCB7IGpvaW4sIHJlc29sdmUsIGRpcm5hbWUgfSBmcm9tICdwYXRoJ1xuaW1wb3J0IHtcbiAgICBpc1BhY2thZ2UsXG4gICAgaXNBYnNvbHV0ZVBhY2thZ2UsXG4gICAgYXBwZW5kRXh0ZW5zaW9uLFxuICAgIGdldEFwcFByZWZpeCxcbiAgICBleHRlbnNpb25zXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlci9yZXNvbHZlJ1xuXG5jb25zdCBjYWNoZSA9IHt9XG5cbmNvbnN0IHJlc29sdmVFeHBvcnRzID0gKGZpbGUpID0+IHtcblxuICAgIGlmIChjYWNoZVtmaWxlXSkge1xuICAgICAgICByZXR1cm4gY2FjaGVbZmlsZV1cbiAgICB9XG5cbiAgICBjb25zdCBkZWZpbmVkTW9kdWxlID0gcmVxdWlyZS5kZWZpbmVkW2ZpbGVdXG5cbiAgICBpZiAoZGVmaW5lZE1vZHVsZSkge1xuICAgICAgICBjb25zdCBsb2NhbFJlcXVpcmUgPSBjcmVhdGVMb2NhbFJlcXVpcmUoZmlsZSlcbiAgICAgICAgY29uc3QgbW9kdWxlID0gY2FjaGVbZmlsZV0gPSB7IGV4cG9ydHM6IHt9IH1cblxuICAgICAgICBkZWZpbmVkTW9kdWxlLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLCBsb2NhbFJlcXVpcmUsIG1vZHVsZSlcblxuICAgICAgICByZXR1cm4gbW9kdWxlXG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxcbn1cblxuY29uc3QgbG9hZCA9IChyZXF1ZXN0LCBwYXJlbnQgPSBnZXRBcHBQcmVmaXgoKSkgPT4ge1xuICAgIGNvbnN0IHJlcXVpcmUgPSB3aW5kb3cucmVxdWlyZVxuICAgIGNvbnN0IG1hcElEID0gZ2V0TW9kdWxlUm9vdChwYXJlbnQpXG4gICAgY29uc3QgcmVtYXBwZWQgPSByZXF1ZXN0TWFwKHJlcXVpcmUuYnJvd3Nlck1hcCwgcmVxdWVzdCwgbWFwSUQpXG4gICAgY29uc3QgY29uZmxpY3RlZCA9IHJlcXVlc3RNYXAocmVxdWlyZS5jb25mbGljdE1hcCwgcmVtYXBwZWQsIG1hcElEKVxuICAgIGNvbnN0IGtleSA9IHJlc29sdmVGaWxlbmFtZShjb25mbGljdGVkLCBwYXJlbnQpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4dGVuc2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZmlsZSA9IGFwcGVuZEV4dGVuc2lvbihrZXksIGV4dGVuc2lvbnNbaV0pXG4gICAgICAgIGNvbnN0IG1vZHVsZSA9IHJlc29sdmVFeHBvcnRzKGZpbGUpXG4gICAgICAgIGlmIChtb2R1bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGUuZXhwb3J0c1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHRlbnNpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBhcHBlbmRFeHRlbnNpb24oam9pbihrZXksICdpbmRleCcpLCBleHRlbnNpb25zW2ldKVxuICAgICAgICBjb25zdCBtb2R1bGUgPSByZXNvbHZlRXhwb3J0cyhmaWxlKVxuICAgICAgICBpZiAobW9kdWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBDYW5ub3QgZmluZCBtb2R1bGUgXCIke2tleX1cIiBmcm9tIFwiJHtwYXJlbnR9XCJgKVxuICAgIGVycm9yLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCdcbiAgICB0aHJvdyBlcnJvclxufVxuXG5jb25zdCByZXF1ZXN0TWFwID0gKG1hcCwgcmVxdWVzdCwgaWQpID0+IHtcbiAgICBjb25zdCBtYXBwZWQgPSBtYXBbaWRdICYmIG1hcFtpZF1bcmVxdWVzdF1cbiAgICByZXR1cm4gbWFwcGVkIHx8IHJlcXVlc3Rcbn1cblxuY29uc3QgZ2V0TW9kdWxlUm9vdCA9IChwYXRoKSA9PiB7XG4gICAgY29uc3Qgbm9kZU1vZHVsZXMgPSAnbm9kZV9tb2R1bGVzJ1xuICAgIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLycpXG4gICAgY29uc3QgaW5kZXggPSBwYXJ0cy5sYXN0SW5kZXhPZihub2RlTW9kdWxlcylcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBwYXJ0c1swXVxuICAgIH1cbiAgICByZXR1cm4gcGFydHMuc2xpY2UoMCwgaW5kZXggKyAyKS5qb2luKCcvJylcbn1cblxuY29uc3QgcmVzb2x2ZUZpbGVuYW1lID0gKGtleSwgcGFyZW50KSA9PiB7XG4gICAgaWYgKGlzQWJzb2x1dGVQYWNrYWdlKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGtleVxuICAgIH1cblxuICAgIGlmIChpc1BhY2thZ2Uoa2V5KSkge1xuICAgICAgICByZXR1cm4ga2V5XG4gICAgfVxuXG4gICAgY29uc3QgeyBhbGlhcyB9ID0gd2luZG93LnJlcXVpcmVcbiAgICBjb25zdCBwYXJlbnRBbGlhcyA9IChhbGlhc1twYXJlbnRdID8gYWxpYXNbcGFyZW50XSA6IHBhcmVudClcbiAgICBjb25zdCBwYXJlbnRGaWxlID0gYXBwZW5kRXh0ZW5zaW9uKHBhcmVudEFsaWFzKVxuICAgIGNvbnN0IGRpcmVjdG9yeSA9IGRpcm5hbWUocGFyZW50RmlsZSlcblxuICAgIHJldHVybiBqb2luKGRpcmVjdG9yeSwga2V5KVxufVxuXG5leHBvcnQgeyBsb2FkIH1cblxuY29uc3QgY3JlYXRlTG9jYWxSZXF1aXJlID0gcGFyZW50ID0+IGtleSA9PiB3aW5kb3cucmVxdWlyZShrZXksIHBhcmVudClcbiIsImltcG9ydCBleHRlbmQgZnJvbSAnb2JqZWN0LWV4dGVuZCdcbmltcG9ydCAqIGFzIE1vZHVsZSBmcm9tICcuL21vZHVsZS5qcydcblxuY29uc3QgZXZhbE1vZHVsZXMgPSAobW9kdWxlcykgPT4ge1xuICAgIG1vZHVsZXMuZm9yRWFjaChtb2R1bGUgPT4ge1xuICAgICAgICBjb25zdCByZXF1aXJlID0gd2luZG93LnJlcXVpcmVcbiAgICAgICAgY29uc3QgeyBpZCwga2V5LCBhbGlhcywgc291cmNlIH0gPSBtb2R1bGVcblxuICAgICAgICByZXF1aXJlLmRlZmluZVNvdXJjZShrZXksIHNvdXJjZSlcbiAgICAgICAgcmVxdWlyZS5pZHMucHVzaChpZClcblxuICAgICAgICBpZiAoYWxpYXMpIHJlcXVpcmUuYWxpYXNba2V5XSA9IGFsaWFzXG4gICAgfSlcbn1cblxuY29uc3QgZW5hYmxlQnJvd3NlclJlcXVpcmUgPSAobW9kdWxlcykgPT4ge1xuXG4gICAgY29uc3QgcmVxdWlyZSA9IChyZXF1ZXN0LCBsb2FkZXJQYXRoKSA9PiAoIE1vZHVsZS5sb2FkKHJlcXVlc3QsIGxvYWRlclBhdGgpIClcblxuICAgIHJlcXVpcmUuZGVmaW5lZCA9IHt9XG4gICAgcmVxdWlyZS5pZHMgPSBbXVxuICAgIHJlcXVpcmUuYWxpYXMgPSB7fVxuICAgIHJlcXVpcmUuYnJvd3Nlck1hcCA9IHt9XG4gICAgcmVxdWlyZS5jb25mbGljdE1hcCA9IHt9XG4gICAgcmVxdWlyZS5kZWZpbmUgPSAobW9kdWxlLCBmbikgPT4gcmVxdWlyZS5kZWZpbmVkW21vZHVsZV0gPSBmblxuICAgIHJlcXVpcmUuZGVmaW5lU291cmNlID0gKGtleSwgc291cmNlKSA9PiB7XG4gICAgICAgIGNvbnN0IHdyYXBwZWRNb2R1bGUgPSBldmFsKFxuICAgICAgICAgICAgJyhmdW5jdGlvbihleHBvcnRzLHJlcXVpcmUsbW9kdWxlKXsnICtcbiAgICAgICAgICAgICAgICAoc291cmNlICsgJ1xcbicpICtcbiAgICAgICAgICAgICd9KS5iaW5kKHdpbmRvdyknXG4gICAgICAgIClcbiAgICAgICAgcmVxdWlyZS5kZWZpbmUoa2V5LCB3cmFwcGVkTW9kdWxlKVxuICAgIH1cbiAgICByZXF1aXJlLmxvYWQgPSAodXJsKSA9PiAoXG4gICAgICAgIHdpbmRvdy5mZXRjaCh1cmwpXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgLnRoZW4oKHsgYnJvd3Nlck1hcCwgY29uZmxpY3RNYXAsIG1vZHVsZXMgfSkgPT4ge1xuICAgICAgICAgICAgcmVxdWlyZS5icm93c2VyTWFwID0gZXh0ZW5kKHJlcXVpcmUuYnJvd3Nlck1hcCwgYnJvd3Nlck1hcClcbiAgICAgICAgICAgIHJlcXVpcmUuY29uZmxpY3RNYXAgPSBleHRlbmQocmVxdWlyZS5jb25mbGljdE1hcCwgY29uZmxpY3RNYXApXG4gICAgICAgICAgICBldmFsTW9kdWxlcyhtb2R1bGVzKVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZSA9PiBjb25zb2xlLmVycm9yKGUpKVxuICAgIClcblxuICAgIHdpbmRvdy5yZXF1aXJlID0gcmVxdWlyZVxuXG4gICAgaWYgKG1vZHVsZXMpIGV2YWxNb2R1bGVzKG1vZHVsZXMpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGVuYWJsZUJyb3dzZXJSZXF1aXJlXG5cbi8vIEluc3BpcmVkIGJ5OlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2VmYWNpbGl0YXRpb24vY29tbW9uanMtcmVxdWlyZVxuIl0sIm5hbWVzIjpbIm5vcm1hbGl6ZUFycmF5IiwicGFydHMiLCJhbGxvd0Fib3ZlUm9vdCIsInVwIiwiaSIsImxlbmd0aCIsImxhc3QiLCJzcGxpY2UiLCJ1bnNoaWZ0IiwicmVzb2x2ZSIsInJlc29sdmVkUGF0aCIsInJlc29sdmVkQWJzb2x1dGUiLCJhcmd1bWVudHMiLCJwYXRoIiwiVHlwZUVycm9yIiwiY2hhckF0IiwiZmlsdGVyIiwic3BsaXQiLCJwIiwiam9pbiIsIm5vcm1hbGl6ZSIsImlzUGF0aEFic29sdXRlIiwiaXNBYnNvbHV0ZSIsInRyYWlsaW5nU2xhc2giLCJzdWJzdHIiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImluZGV4IiwicmVsYXRpdmUiLCJmcm9tIiwidG8iLCJ0cmltIiwiYXJyIiwic3RhcnQiLCJlbmQiLCJmcm9tUGFydHMiLCJ0b1BhcnRzIiwiTWF0aCIsIm1pbiIsInNhbWVQYXJ0c0xlbmd0aCIsIm91dHB1dFBhcnRzIiwicHVzaCIsImNvbmNhdCIsImRpcm5hbWUiLCJyZXN1bHQiLCJzcGxpdFBhdGgiLCJyb290IiwiZGlyIiwiYmFzZW5hbWUiLCJleHQiLCJmIiwiZXh0bmFtZSIsInhzIiwicmVzIiwiZXh0ZW5kIiwiYSIsImIiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInRvU3RyaW5nIiwic3BsaXRQYXRoUmUiLCJmaWxlbmFtZSIsImV4ZWMiLCJzZXAiLCJkZWxpbWl0ZXIiLCJzdHIiLCJsZW4iLCJpc0ZpbGUiLCJpbmNsdWRlcyIsInJlc29sdmVEZXN0UGF0aCIsImRlc3QiLCJiYXNlIiwiYWJzb2x1dGUiLCJyZXBsYWNlIiwiaXNSZWxhdGl2ZSIsImdldFJvb3RQYXRoIiwicHJvY2VzcyIsImN3ZCIsImV4dGVuc2lvbnMiLCJnZXRBcHBQcmVmaXgiLCJtb2R1bGVOYW1lIiwiaXNQYWNrYWdlIiwibmFtZSIsImlzQWJzb2x1dGVQYWNrYWdlIiwiaW5kZXhPZiIsImFwcGVuZEV4dGVuc2lvbiIsImV4dGVuc2lvbiIsImNhY2hlIiwicmVzb2x2ZUV4cG9ydHMiLCJmaWxlIiwiZGVmaW5lZE1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmVkIiwibG9jYWxSZXF1aXJlIiwiY3JlYXRlTG9jYWxSZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImxvYWQiLCJyZXF1ZXN0IiwicGFyZW50Iiwid2luZG93IiwibWFwSUQiLCJnZXRNb2R1bGVSb290IiwicmVtYXBwZWQiLCJyZXF1ZXN0TWFwIiwiYnJvd3Nlck1hcCIsImNvbmZsaWN0ZWQiLCJjb25mbGljdE1hcCIsInJlc29sdmVGaWxlbmFtZSIsImVycm9yIiwiRXJyb3IiLCJjb2RlIiwibWFwIiwiaWQiLCJsYXN0SW5kZXhPZiIsImFsaWFzIiwicGFyZW50QWxpYXMiLCJldmFsTW9kdWxlcyIsIm1vZHVsZXMiLCJzb3VyY2UiLCJkZWZpbmVTb3VyY2UiLCJpZHMiLCJlbmFibGVCcm93c2VyUmVxdWlyZSIsImxvYWRlclBhdGgiLCJNb2R1bGUiLCJkZWZpbmUiLCJmbiIsIndyYXBwZWRNb2R1bGUiLCJldmFsIiwidXJsIiwi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
