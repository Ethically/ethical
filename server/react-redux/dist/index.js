function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

const root = '../../..';
const { setProjectRoot } = require(`${root}/helper/resolve-node`);
const { absolute } = require(`${root}/helper/path`);
const createPromiseCollector = require(`${root}/helper/collect`);
const { default: PromiseProvider } = require(`${root}/react/provider`);
const getInitScripts = require(`${root}/client/scripts`);
const React = require('react');
const { createStore, combineReducers } = require('redux');
const { Provider } = require('react-redux');
const { renderToString, renderToStaticMarkup } = require('react-dom/server');
const { StaticRouter } = require('react-router-dom');
const { Helmet } = require('react-helmet');
const { graphql, buildSchema } = require('graphql');

const reactReduxMiddleware = async (ctx, next, config) => {
    const { method, request, response } = ctx;
    const { body } = response;
    if (body !== undefined) {
        return await next();
    }

    const { Layout, Routes, reducer, graphqlSchema, graphqlRoot } = config;
    const { url } = request;

    const promise = createPromiseCollector();
    const store = createStore(combineReducers(reducer));
    const html = await renderRoute({ url, Routes, store, promise });
    const root = React.createElement('ethical-root', { dangerouslySetInnerHTML: { __html: html } });
    const helmet = Helmet.renderStatic();
    const scripts = getInitScripts(store.getState());
    const props = {
        html: helmet.htmlAttributes.toComponent(),
        body: helmet.bodyAttributes.toComponent(),
        title: helmet.title.toComponent(),
        meta: helmet.meta.toComponent(),
        link: helmet.link.toComponent(),
        scripts,
        root
    };

    response.body = renderLayout(Layout, props);

    await next();
};

const renderRoute = async context => {
    const router = {};
    const html = await renderReactComponents(Object.assign({}, context, { router }));
    const { url } = router;
    if (url) {
        return renderRoute(Object.assign({}, context, { url }));
    }
    return html;
};

const renderReactComponents = async context => {

    const { url, router, Routes, store, promise } = context;
    const render = () => renderToString(React.createElement(
        PromiseProvider,
        { promise: promise },
        React.createElement(
            Provider,
            { store: store },
            React.createElement(
                StaticRouter,
                { context: router, location: url },
                Routes
            )
        )
    ));

    const resetProjectRoot = setProjectRoot(module.parent.parent.id);
    const html = render();
    resetProjectRoot();

    const promises = promise();
    const { length } = promises;
    if (length === 0) {
        return html;
    }

    await Promise.all(promises);

    const resetProjectRootAgain = setProjectRoot(module.parent.parent.id);
    const final = render();
    resetProjectRootAgain();

    return final;
};

const renderLayout = (Layout, props) => renderToStaticMarkup(React.createElement(Layout, Object.assign({}, props)));

const bootstrap = config => {

    const resetProjectRoot = setProjectRoot(module.parent.parent.id);

    const { routes, layout, reducers } = config,
          other = _objectWithoutProperties(config, ['routes', 'layout', 'reducers']);

    const { default: Layout } = require(absolute(layout));
    const { default: Routes } = require(absolute(routes));
    const { default: reducer } = require(absolute(reducers));

    resetProjectRoot();

    return Object.assign({ Layout, Routes, reducer }, other);
};

const reactReduxMiddlewareInit = config => {
    const resolvedConfig = bootstrap(config);
    return async (ctx, next) => await reactReduxMiddleware(ctx, next, resolvedConfig);
};

module.exports = reactReduxMiddlewareInit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci9yZWFjdC1yZWR1eC9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsicm9vdCIsInNldFByb2plY3RSb290IiwicmVxdWlyZSIsImFic29sdXRlIiwiY3JlYXRlUHJvbWlzZUNvbGxlY3RvciIsImRlZmF1bHQiLCJQcm9taXNlUHJvdmlkZXIiLCJnZXRJbml0U2NyaXB0cyIsIlJlYWN0IiwiY3JlYXRlU3RvcmUiLCJjb21iaW5lUmVkdWNlcnMiLCJQcm92aWRlciIsInJlbmRlclRvU3RyaW5nIiwicmVuZGVyVG9TdGF0aWNNYXJrdXAiLCJTdGF0aWNSb3V0ZXIiLCJIZWxtZXQiLCJncmFwaHFsIiwiYnVpbGRTY2hlbWEiLCJyZWFjdFJlZHV4TWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJjb25maWciLCJtZXRob2QiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJib2R5IiwidW5kZWZpbmVkIiwiTGF5b3V0IiwiUm91dGVzIiwicmVkdWNlciIsImdyYXBocWxTY2hlbWEiLCJncmFwaHFsUm9vdCIsInVybCIsInByb21pc2UiLCJzdG9yZSIsImh0bWwiLCJyZW5kZXJSb3V0ZSIsIl9faHRtbCIsImhlbG1ldCIsInJlbmRlclN0YXRpYyIsInNjcmlwdHMiLCJnZXRTdGF0ZSIsInByb3BzIiwiaHRtbEF0dHJpYnV0ZXMiLCJ0b0NvbXBvbmVudCIsImJvZHlBdHRyaWJ1dGVzIiwidGl0bGUiLCJtZXRhIiwibGluayIsInJlbmRlckxheW91dCIsImNvbnRleHQiLCJyb3V0ZXIiLCJyZW5kZXJSZWFjdENvbXBvbmVudHMiLCJyZW5kZXIiLCJyZXNldFByb2plY3RSb290IiwibW9kdWxlIiwicGFyZW50IiwiaWQiLCJwcm9taXNlcyIsImxlbmd0aCIsIlByb21pc2UiLCJhbGwiLCJyZXNldFByb2plY3RSb290QWdhaW4iLCJmaW5hbCIsImJvb3RzdHJhcCIsInJvdXRlcyIsImxheW91dCIsInJlZHVjZXJzIiwib3RoZXIiLCJyZWFjdFJlZHV4TWlkZGxld2FyZUlu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QU1pQyxtQkFBbUJyRCxlQUFlc0QsT0FBT0MsTUFBUCxDQUFjQSxNQUFkLENBQXFCQyxFQUFwQyxDQUF6Qjs7QUFFQSxVQUFNLEVBQUVRLE1BQUYsRUFBVUMsTUFBVixFQUFrQkMsUUFBbEIsS0FBeUM5QyxNQUEvQztBQUFBLFVBQXFDK0MsS0FBckMsNEJBQStDL0MsTUFBL0M7O0FBRUEsVUFBTSxFQUFFaEIsU0FBU3NCLE1BQVgsS0FBc0J6QixRQUFRQyxTQUFTK0QsTUFBVCxDQUFSLENBQTVCO0FBQ0EsVUFBTSxFQUFFN0QsU0FBU3VCLE1BQVgsS0FBc0IxQixRQUFRQyxTQUFTOEQsTUFBVCxDQUFSLENBQTVCO0FBQ0EsVUFBTSxFQUFFNUQsU0FBU3dCLE9BQVgsS0FBdUIzQixRQUFRQyxTQUFTZ0UsUUFBVCxDQUFSLENBQTdCOztBQUVBYjs7QUFFQSwyQkFBUzNCLE1BQVQsRUFBaUJDLE1BQWpCLEVBQXlCQyxPQUF6QixJQUFxQ3VDLEtBQXJDO0FBQ0gsQ0FiRDs7QUFlQSxNQUFNQywyQkFBNEJoRCxNQUFELElBQVk7QUFDekMsVUFBTWlELGlCQUFpQk4sVUFBVTNDLE1BQVYsQ0FBdkI7QUFDQSxXQUNJLE9BQU9GLEdBQVAsRUFBWUMsSUFBWixLQUNJLE1BQU1GLHFCQUFxQkMsR0FBckIsRUFBMEJDLElBQTFCLEVBQWdDa0QsY0FBaEMsQ0FGZDtBQUtILENBUEQ7O0FBU0FmLE9BQU9nQixPQUFQLEdBQWlCRix3QkFBakIiLCJmaWxlIjoidW5rbm93biIsInNvdXJjZVJvb3QiOiJub2RlX21vZHVsZXMvZXRoaWNhbCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJvb3QgPSAnLi4vLi4vLi4nXG5jb25zdCB7IHNldFByb2plY3RSb290IH0gPSByZXF1aXJlKGAke3Jvb3R9L2hlbHBlci9yZXNvbHZlLW5vZGVgKVxuY29uc3QgeyBhYnNvbHV0ZSB9ID0gcmVxdWlyZShgJHtyb290fS9oZWxwZXIvcGF0aGApXG5jb25zdCBjcmVhdGVQcm9taXNlQ29sbGVjdG9yID0gcmVxdWlyZShgJHtyb290fS9oZWxwZXIvY29sbGVjdGApXG5jb25zdCB7IGRlZmF1bHQ6IFByb21pc2VQcm92aWRlciB9ID0gcmVxdWlyZShgJHtyb290fS9yZWFjdC9wcm92aWRlcmApXG5jb25zdCBnZXRJbml0U2NyaXB0cyA9IHJlcXVpcmUoYCR7cm9vdH0vY2xpZW50L3NjcmlwdHNgKVxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG5jb25zdCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMgfSA9IHJlcXVpcmUoJ3JlZHV4JylcbmNvbnN0IHsgUHJvdmlkZXIgfSA9IHJlcXVpcmUoJ3JlYWN0LXJlZHV4JylcbmNvbnN0IHsgcmVuZGVyVG9TdHJpbmcsIHJlbmRlclRvU3RhdGljTWFya3VwIH0gPSByZXF1aXJlKCdyZWFjdC1kb20vc2VydmVyJylcbmNvbnN0IHsgU3RhdGljUm91dGVyIH0gPSByZXF1aXJlKCdyZWFjdC1yb3V0ZXItZG9tJylcbmNvbnN0IHsgSGVsbWV0IH0gPSByZXF1aXJlKCdyZWFjdC1oZWxtZXQnKVxuY29uc3QgeyBncmFwaHFsLCBidWlsZFNjaGVtYSB9ID0gcmVxdWlyZSgnZ3JhcGhxbCcpXG5cbmNvbnN0IHJlYWN0UmVkdXhNaWRkbGV3YXJlID0gYXN5bmMgKGN0eCwgbmV4dCwgY29uZmlnKSA9PiB7XG4gICAgY29uc3QgeyBtZXRob2QsIHJlcXVlc3QsIHJlc3BvbnNlIH0gPSBjdHhcbiAgICBjb25zdCB7IGJvZHkgfSA9IHJlc3BvbnNlXG4gICAgaWYgKGJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgbmV4dCgpXG4gICAgfVxuXG4gICAgY29uc3QgeyAgTGF5b3V0LCBSb3V0ZXMsIHJlZHVjZXIsIGdyYXBocWxTY2hlbWEsIGdyYXBocWxSb290IH0gPSBjb25maWdcbiAgICBjb25zdCB7IHVybCB9ID0gcmVxdWVzdFxuXG4gICAgY29uc3QgcHJvbWlzZSA9IGNyZWF0ZVByb21pc2VDb2xsZWN0b3IoKVxuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoY29tYmluZVJlZHVjZXJzKHJlZHVjZXIpKVxuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJSb3V0ZSh7IHVybCwgUm91dGVzLCBzdG9yZSwgcHJvbWlzZSB9KVxuICAgIGNvbnN0IHJvb3QgPSA8ZXRoaWNhbC1yb290IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXsgeyBfX2h0bWw6IGh0bWwgfSB9IC8+XG4gICAgY29uc3QgaGVsbWV0ID0gSGVsbWV0LnJlbmRlclN0YXRpYygpXG4gICAgY29uc3Qgc2NyaXB0cyA9IGdldEluaXRTY3JpcHRzKHN0b3JlLmdldFN0YXRlKCkpXG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgIGh0bWw6IGhlbG1ldC5odG1sQXR0cmlidXRlcy50b0NvbXBvbmVudCgpLFxuICAgICAgICBib2R5OiBoZWxtZXQuYm9keUF0dHJpYnV0ZXMudG9Db21wb25lbnQoKSxcbiAgICAgICAgdGl0bGU6IGhlbG1ldC50aXRsZS50b0NvbXBvbmVudCgpLFxuICAgICAgICBtZXRhOiBoZWxtZXQubWV0YS50b0NvbXBvbmVudCgpLFxuICAgICAgICBsaW5rOiBoZWxtZXQubGluay50b0NvbXBvbmVudCgpLFxuICAgICAgICBzY3JpcHRzLFxuICAgICAgICByb290XG4gICAgfVxuXG4gICAgcmVzcG9uc2UuYm9keSA9IHJlbmRlckxheW91dChMYXlvdXQsIHByb3BzKVxuXG4gICAgYXdhaXQgbmV4dCgpXG59XG5cbmNvbnN0IHJlbmRlclJvdXRlID0gYXN5bmMgKGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByb3V0ZXIgPSB7fVxuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJSZWFjdENvbXBvbmVudHMoeyAuLi5jb250ZXh0LCByb3V0ZXIgfSlcbiAgICBjb25zdCB7IHVybCB9ID0gcm91dGVyXG4gICAgaWYgKHVybCkge1xuICAgICAgICByZXR1cm4gcmVuZGVyUm91dGUoeyAuLi5jb250ZXh0LCB1cmwgfSlcbiAgICB9XG4gICAgcmV0dXJuIGh0bWxcbn1cblxuY29uc3QgcmVuZGVyUmVhY3RDb21wb25lbnRzID0gYXN5bmMgKGNvbnRleHQpID0+IHtcblxuICAgIGNvbnN0IHsgdXJsLCByb3V0ZXIsIFJvdXRlcywgc3RvcmUsIHByb21pc2UgfSA9IGNvbnRleHRcbiAgICBjb25zdCByZW5kZXIgPSAoKSA9PiByZW5kZXJUb1N0cmluZyhcbiAgICAgICAgPFByb21pc2VQcm92aWRlciBwcm9taXNlPXtwcm9taXNlfT5cbiAgICAgICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICAgICAgICAgIDxTdGF0aWNSb3V0ZXIgY29udGV4dD17cm91dGVyfSBsb2NhdGlvbj17dXJsfT5cbiAgICAgICAgICAgICAgICAgICAge1JvdXRlc31cbiAgICAgICAgICAgICAgICA8L1N0YXRpY1JvdXRlcj5cbiAgICAgICAgICAgIDwvUHJvdmlkZXI+XG4gICAgICAgIDwvUHJvbWlzZVByb3ZpZGVyPlxuICAgIClcblxuICAgIGNvbnN0IHJlc2V0UHJvamVjdFJvb3QgPSBzZXRQcm9qZWN0Um9vdChtb2R1bGUucGFyZW50LnBhcmVudC5pZClcbiAgICBjb25zdCBodG1sID0gcmVuZGVyKClcbiAgICByZXNldFByb2plY3RSb290KClcblxuICAgIGNvbnN0IHByb21pc2VzID0gcHJvbWlzZSgpXG4gICAgY29uc3QgeyBsZW5ndGggfSA9IHByb21pc2VzXG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaHRtbFxuICAgIH1cblxuICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKVxuXG4gICAgY29uc3QgcmVzZXRQcm9qZWN0Um9vdEFnYWluID0gc2V0UHJvamVjdFJvb3QobW9kdWxlLnBhcmVudC5wYXJlbnQuaWQpXG4gICAgY29uc3QgZmluYWwgPSByZW5kZXIoKVxuICAgIHJlc2V0UHJvamVjdFJvb3RBZ2FpbigpXG5cbiAgICByZXR1cm4gZmluYWxcbn1cblxuY29uc3QgcmVuZGVyTGF5b3V0ID0gKExheW91dCwgcHJvcHMpID0+IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgIDxMYXlvdXQgeyAuLi57IC4uLnByb3BzfSB9IC8+XG4pXG5cbmNvbnN0IGJvb3RzdHJhcCA9IChjb25maWcpID0+IHtcblxuICAgIGNvbnN0IHJlc2V0UHJvamVjdFJvb3QgPSBzZXRQcm9qZWN0Um9vdChtb2R1bGUucGFyZW50LnBhcmVudC5pZClcblxuICAgIGNvbnN0IHsgcm91dGVzLCBsYXlvdXQsIHJlZHVjZXJzLCAuLi5vdGhlciB9ID0gY29uZmlnXG5cbiAgICBjb25zdCB7IGRlZmF1bHQ6IExheW91dCB9ID0gcmVxdWlyZShhYnNvbHV0ZShsYXlvdXQpKVxuICAgIGNvbnN0IHsgZGVmYXVsdDogUm91dGVzIH0gPSByZXF1aXJlKGFic29sdXRlKHJvdXRlcykpXG4gICAgY29uc3QgeyBkZWZhdWx0OiByZWR1Y2VyIH0gPSByZXF1aXJlKGFic29sdXRlKHJlZHVjZXJzKSlcblxuICAgIHJlc2V0UHJvamVjdFJvb3QoKVxuXG4gICAgcmV0dXJuIHsgTGF5b3V0LCBSb3V0ZXMsIHJlZHVjZXIsIC4uLm90aGVyIH1cbn1cblxuY29uc3QgcmVhY3RSZWR1eE1pZGRsZXdhcmVJbml0ID0gKGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IHJlc29sdmVkQ29uZmlnID0gYm9vdHN0cmFwKGNvbmZpZylcbiAgICByZXR1cm4gKFxuICAgICAgICBhc3luYyAoY3R4LCBuZXh0KSA9PiAoXG4gICAgICAgICAgICBhd2FpdCByZWFjdFJlZHV4TWlkZGxld2FyZShjdHgsIG5leHQsIHJlc29sdmVkQ29uZmlnKVxuICAgICAgICApXG4gICAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWN0UmVkdXhNaWRkbGV3YXJlSW5pdFxuIl19