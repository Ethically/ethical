function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

const root = '../../..';
const { setProjectRoot } = require(`${root}/helper/resolve-node`);
const { absolute } = require(`${root}/helper/path`);
const createPromiseCollector = require(`${root}/helper/collect`);
const { default: PromiseProvider } = require(`${root}/react/provider`);
const getInitScripts = require(`${root}/client/scripts`);
const { Helmet } = require(`${root}/react/helmet`);
const React = require('react');
const { Provider } = require('react-redux');
const { renderToString, renderToStaticMarkup } = require('react-dom/server');
const { StaticRouter } = require('react-router-dom');

const setGlobals = request => {

    if (request) {
        global.navigator = { userAgent: request.headers['user-agent'] };
    }

    const resetProjectRoot = setProjectRoot(module.parent.parent.id);

    return () => {
        resetProjectRoot();
        delete global.navigator;
    };
};

const resolveLayoutProps = (html, store) => {
    const root = React.createElement('ethical-root', { dangerouslySetInnerHTML: { __html: html } });
    const scripts = getInitScripts(store.getState());
    const helmet = Helmet.renderStatic();
    const props = {
        html: helmet.htmlAttributes.toComponent(),
        body: helmet.bodyAttributes.toComponent(),
        title: helmet.title.toComponent(),
        meta: helmet.meta.toComponent(),
        link: helmet.link.toComponent(),
        base: helmet.base.toComponent(),
        style: helmet.style.toComponent(),
        noscript: helmet.noscript.toComponent(),
        scripts,
        root
    };
    return props;
};

const reactReduxMiddleware = async (ctx, next, config) => {
    const { method, request, response } = ctx;
    const { body } = response;
    if (body !== undefined) {
        return await next();
    }

    const { Layout, Routes, createStore, graphqlSchema, graphqlRoot } = config;
    const { url } = request;

    const promise = createPromiseCollector();
    const store = createStore();
    const props = await renderRoute({ url, Routes, store, promise, request });

    response.body = renderLayout(Layout, props);

    await next();
};

const renderRoute = async context => {
    const router = {};
    const props = await renderReactComponents(Object.assign({}, context, { router }));
    const { url } = router;
    if (url) {
        return renderRoute(Object.assign({}, context, { url }));
    }
    return props;
};

const renderReactComponents = async context => {

    const { url, router, Routes, store, promise, request } = context;
    const render = () => renderToString(React.createElement(
        PromiseProvider,
        { promise: promise },
        React.createElement(
            Provider,
            { store: store },
            React.createElement(
                StaticRouter,
                { context: router, location: url },
                Routes
            )
        )
    ));

    const resetGlobals = setGlobals(request);
    const html = render();
    resetGlobals();

    const promises = promise();
    const { length } = promises;
    if (length === 0) {
        return resolveLayoutProps(html, store);
    }

    await Promise.all(promises);

    const resetGlobalsAgain = setGlobals(request);
    const final = render();
    resetGlobalsAgain();

    return resolveLayoutProps(final, store);
};

const renderLayout = (Layout, props) => renderToStaticMarkup(React.createElement(Layout, Object.assign({}, props)));

const bootstrap = config => {

    const resetGlobals = setGlobals();

    const { routes, layout, store } = config,
          other = _objectWithoutProperties(config, ['routes', 'layout', 'store']);

    const { default: Layout } = require(absolute(layout));
    const { default: Routes } = require(absolute(routes));
    const { default: createStore } = require(absolute(store));

    resetGlobals();

    return Object.assign({ Layout, Routes, createStore }, other);
};

const reactReduxMiddlewareInit = config => {
    const resolvedConfig = bootstrap(config);
    return async (ctx, next) => await reactReduxMiddleware(ctx, next, resolvedConfig);
};

module.exports = reactReduxMiddlewareInit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,